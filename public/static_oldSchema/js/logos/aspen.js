angular.module('companyLogo', []).
   //camel cased directive name
   //in your HTML, this will be named as bars-chart
   directive('logo', function ($parse) {
        var directive = {
         restrict: 'E',
         replace: false,
         scope: {data: '=chartData'},
         link: function (scope, element, attrs) {

            function drawLogo(tooth,dee){

            var svg = d3.select("body").append("svg")
                .attr("width", "900pt")
                .attr("height", "543pt")
                .attr("viewbox", "0 0 900 543")
                .attr("preserveAspectRatio", "xMidYMid meet")
                .append("g")
                .attr("transform", "translate(0,543)scale(0.1,-0.1)")
                .attr("fill", "#000000")
                .attr("stroke", "none")

            combinedPath = ""
            dee.forEach(function(d){
                combinedPath += d.path

            })

            var d0 = tooth.path,
                d1 = combinedPath;

            svg.append("path")
                .attr("d", d0)
                .call(transition, d0, d1);

            function transition(path, d0, d1) {
                setTimeout(function(){
                  path.transition()
                      .duration(4500)
                      .attrTween("d", pathTween(d1, 30))
                      .each("end", function() { d3.select(this).call(transition, d1, d0); });

                },500)

            }
            function pathTween(d1, precision) {
              return function() {
                var path0 = this,
                    path1 = path0.cloneNode(),
                    n0 = path0.getTotalLength(),
                    n1 = (path1.setAttribute("d", d1), path1).getTotalLength();

                // Uniform sampling of distance based on specified precision.
                var distances = [0], i = 0, dt = precision / Math.max(n0, n1);
                while ((i += dt) < 1) distances.push(i);
                distances.push(1);

                // Compute point-interpolators at each distance.
                var points = distances.map(function(t) {
                  var p0 = path0.getPointAtLength(t * n0),
                      p1 = path1.getPointAtLength(t * n1);
                  return d3.interpolate([p0.x, p0.y], [p1.x, p1.y]);
             });

            return function(t) {
              return t < 1 ? "M" + points.map(function(p) { return p(t); }).join("L") : d1;
            };
  };
}










      }
            tooth = scope.data[0].tooth
            dee = scope.data[0].dee
            drawLogo(tooth,dee)

         }
      };
      return directive;
   });

function Ctrl($scope) {
    //Data Elements
    tooth = {"path":"M1419 5981 c-1197 -151 -1714 -1630 -879 -2511 l95 -100 12 -320 c54 -1484 536 -2923 1015 -3030 307 -69 426 115 646 1004 246 992 444 1304 773 1216 252 -68 399 -360 610 -1214 212 -855 336 -1062 614 -1018 498 80 993 1516 1048 3042 l12 320 95 100 c542 566 549 1469 16 2040 -475 509 -997 596 -1956 327 -365 -103 -684 -98 -1080 17 -429 124 -736 162 -1021 127z m414 -242 c105 -12 282 -49 394 -82 112 -33 305 -87 429 -118 400 -102 805 -330 1130 -636 181 -171 227 -190 294 -123 112 112 -147 400 -608 676 -76 46 -125 87 -110 91 916 255 1251 261 1647 28 731 -429 823 -1384 194 -2008 l-83 -82 0 -158 c0 -1085 -364 -2621 -707 -2984 -200 -212 -260 -117 -491 787 -273 1068 -471 1360 -922 1359 -452 0 -648 -289 -922 -1358 -205 -803 -264 -930 -396 -862 -352 182 -739 1595 -795 2900 l-13 319 -146 155 c-743 794 -225 2056 868 2115 25 1 132 -8 237 -19z"}
    smile = {"path":"M5540 3169 c-550 -561 -4176 -1000 -5125 -620 -171 68 -250 68 -267 0 -27 -106 143 -222 422 -289 l140 -33 10 -404 c11 -437 15 -452 120 -434 103 18 240 33 241 27 11 -69 72 -1070 66 -1081 -5 -8 -47 -16 -93 -16 -162 -2 -241 -26 -272 -82 -72 -127 107 -150 614 -78 1539 220 3091 851 3786 1541 431 427 538 692 531 1310 -4 312 -14 322 -173 159z m-20 -416 c0 -143 -75 -392 -161 -537 -92 -155 -108 -166 -259 -184 -325 -37 -4159 -513 -4205 -521 l-55 -10 0 345 0 344 655 0 c666 0 822 7 1355 59 1066 105 2169 341 2560 547 108 57 110 56 110 -43z m-432 -858 c-100 -224 -995 -744 -1828 -1062 -596 -228 -1965 -547 -1990 -465 -10 32 -74 1055 -66 1062 5 6 3776 482 3860 488 21 1 30 -8 24 -23z"}

    dee = {"path":"M350 1680 l0 -1460 510 0 c917 1 1270 91 1583 402 469 467 485 1600 29 2092 -298 322 -687 425 -1612 426 l-510 0 0 -1460z m1338 1082 c470 -125 667 -413 687 -1005 30 -882 -282 -1187 -1240 -1212 l-395 -10 0 1145 0 1145 395 -10 c315 -8 427 -19 553 -53z"}
    aspen = [
        {"path":"M309 990 c-19 -50 -31 -93 -27 -96 4 -3 55 -24 112 -47 l104 -43 -49 131 c-27 71 -49 133 -49 137 0 46 -65 -13 -91 -82z"},
        {"path":"M3060 523 l0 -368 178 9 c295 14 420 141 398 404 -17 211 -139 304 -411 315 l-165 7 0 -367z m327 250 c269 -113 164 -513 -135 -513 l-92 0 0 270 0 270 81 0 c44 0 110 -12 146 -27z"},
        {"path":"M4925 879 c-33 -13 -45 -34 -45 -78 0 -54 -7 -61 -60 -61 -47 0 -60 -9 -60 -40 0 -31 13 -40 60 -40 l60 0 0 -197 c0 -246 31 -303 168 -303 98 0 111 8 98 58 -6 25 -23 33 -54 27 -71 -13 -91 36 -99 232 l-6 183 76 0 c64 0 77 7 77 40 0 33 -13 40 -78 40 l-78 0 11 80 c11 83 4 89 -70 59z"},
        {"path":"M5716 530 l6 -370 49 0 49 0 0 370 0 370 -55 0 -55 0 6 -370z"},
        {"path":"M5894 888 c-24 -25 -15 -82 16 -108 40 -33 94 10 86 68 -6 42 -74 68 -102 40z"},
        {"path":"M134 525 c-61 -162 -117 -311 -125 -331 -13 -33 -3 -36 93 -30 101 6 108 9 125 71 30 106 238 100 274 -7 l23 -72 237 7 c265 8 333 36 366 152 30 103 -18 168 -157 216 -74 25 -120 51 -120 70 0 37 93 49 171 22 59 -21 59 -20 59 57 0 77 -1 78 -92 91 -326 49 -469 -251 -167 -349 161 -53 155 -110 -13 -118 l-122 -6 -66 176 c-83 221 -119 273 -220 314 -147 58 -144 61 -266 -263z m275 47 c43 -149 42 -152 -49 -152 -97 0 -96 -15 -10 235 15 44 26 28 59 -83z"},
        {"path":"M1999 762 c-148 -47 -199 -126 -199 -306 0 -198 105 -296 318 -296 174 0 222 23 222 107 l0 69 -98 -29 c-118 -35 -214 -16 -258 49 l-29 44 205 0 205 0 -12 92 c-29 211 -179 325 -354 270z m175 -182 l25 -50 -112 -6 c-133 -7 -143 -1 -98 67 45 69 148 63 185 -11z"},
        {"path":"M1180 380 l0 -380 93 0 93 0 -12 131 -13 131 52 -41 c221 -173 457 159 310 434 -64 119 -304 133 -350 20 -5 -14 -11 0 -11 30 -2 51 -8 55 -82 55 l-80 0 0 -380z m360 200 c80 -80 31 -280 -70 -280 -58 0 -110 76 -110 160 0 84 52 160 110 160 17 0 48 -18 70 -40z"},
        {"path":"M2400 460 l0 -300 90 0 90 0 0 176 c0 195 29 264 110 264 90 0 110 -46 110 -251 l0 -189 90 0 90 0 0 201 c0 219 -26 313 -102 366 -83 58 -230 35 -292 -45 -21 -28 -25 -24 -25 23 -1 51 -7 55 -81 55 l-80 0 0 -300z"},
        {"path":"M3826 721 c-120 -73 -169 -300 -96 -442 77 -148 450 -172 450 -28 0 56 -11 59 -80 19 -116 -66 -300 11 -300 127 0 37 10 39 200 28 l200 -11 0 75 c0 215 -199 339 -374 232z m206 -76 c32 -21 73 -106 59 -120 -25 -26 -291 -21 -291 5 0 89 155 166 232 115z"},
        {"path":"M4480 746 c-16 -6 -50 -30 -75 -52 l-45 -41 0 44 c0 33 -12 43 -50 43 l-50 0 0 -290 0 -290 60 0 60 0 0 197 c0 235 34 303 150 303 107 0 130 -52 130 -294 l0 -206 58 0 58 0 -10 215 c-14 331 -98 440 -286 371z"},
        {"path":"M5285 736 c-50 -17 -65 -33 -65 -71 0 -40 7 -46 35 -34 67 30 216 34 239 6 68 -85 53 -117 -53 -117 -187 0 -281 -67 -281 -200 0 -137 199 -214 331 -128 45 30 49 30 49 0 0 -21 17 -32 52 -32 l51 0 -6 240 c-9 323 -109 418 -352 336z m247 -361 c-23 -122 -166 -179 -241 -96 -72 80 8 157 167 160 l87 1 -13 -65z"},


        ]
    $scope.dots = [{"tooth":smile,"dee":aspen}];
}